// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Skill {
    id        String     @id @default(cuid())
    name      String     @unique
    slug      String
    providers Provider[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Profile {
    id     String      @id @default(cuid())
    slug   String      @unique
    name   String      @unique
    avatar String?
    bio    String?
    type   ProfileType
    phone  String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String

    providerInfo Provider?

    customerInfo Customer?

    deletedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([locationId])
}

model Provider {
    id             String   @id @default(cuid())
    websiteUrl     String?
    profession     String?
    isFaceToFace   Boolean? @default(true)
    isRemote       Boolean? @default(true)
    showCasePhotos File[] // Should be Max 03 photos

    skills               Skill[]
    serviceRequestOffers ServiceRequestOffer[]

    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String  @unique

    ServiceRequestParticipations ServiceRequestProvider[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Customer {
    id              String           @id @default(cuid())
    serviceRequests ServiceRequest[]

    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CategoryService {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String? @unique
    description String?

    services Service[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Service {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String? @unique
    description String?

    serviceRequests ServiceRequest[]

    categoryService   CategoryService? @relation(fields: [categoryServiceId], references: [id], onDelete: Cascade)
    categoryServiceId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([categoryServiceId])
}

model File {
    id   String  @id @default(cuid())
    name String
    url  String
    key  String? @unique

    serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
    serviceRequestId String?

    provider   Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([providerId])
    @@index([serviceRequestId])
}

model ServiceRequest {
    id                     String   @id @default(cuid())
    title                  String
    slug                   String   @unique
    description            String?
    phoneToContact         String
    photos                 File[] // Should be Max 03 photos
    numberOfProviderNeeded Int      @default(1)
    willWantProposal       Boolean? @default(false)
    nbOfHours              Float?
    date                   DateTime @db.Date
    startHour              Float
    estimatedPrice         Float?

    location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String

    status ServiceRequestStatus? @default(value: OPEN)

    offers ServiceRequestOffer[]

    choosedProviders ServiceRequestProvider[]

    author   Customer @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    serviceId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([serviceId])
    @@index([authorId])
    @@index([locationId])
}

model ServiceRequestOffer {
    id            String  @id @default(cuid())
    text          String  @db.Text
    proposedPrice String?

    author   Provider @relation(fields: [authorId], references: [id])
    authorId String

    serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
    serviceRequestId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([serviceRequestId])
    @@index([authorId])
}

model ServiceRequestProvider {
    id   String  @id @default(cuid())
    note String? @db.Text

    provider   Provider @relation(fields: [providerId], references: [id])
    providerId String

    serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
    serviceRequestId String

    removedAt DateTime?
    createdAt DateTime  @default(now())

    @@index([providerId])
    @@index([serviceRequestId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.Text
    access_token      String? @map("accessToken") @db.Text
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken") @db.Text
    session_state     String? @map("sessionSate")

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model Location {
    id             String           @id @default(cuid())
    name           String           @unique
    lat            String
    long           String
    wikidata       String?
    Profile        Profile[]
    ServiceRequest ServiceRequest[]
}

model User {
    id               String    @id @default(cuid())
    firstName        String
    lastName         String
    fullName         String
    hasBeenOnboarded Boolean?  @default(false)
    picture          String?
    birthdate        String?
    email            String    @unique
    emailVerified    DateTime?
    sex              Sex?      @default(value: MALE)
    role             Role      @default(value: MEMBER)

    accounts Account[]
    sessions Session[]
    profiles Profile[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Sex {
    MALE
    FEMALE
}

enum Role {
    ADMIN
    MEMBER
}

enum ServiceRequestStatus {
    OPEN
    CLOSED
}

enum ProfileType {
    CUSTOMER
    PROVIDER
}
