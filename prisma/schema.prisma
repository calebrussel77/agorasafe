// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Skill {
    id        String     @id @default(cuid())
    name      String     @unique
    providers Provider[]

    createdAt DateTime @default(now())
}

model ShowCaseProject {
    id          String  @id @default(cuid())
    title       String
    description String? @db.Text

    photo File?

    provider   Provider? @relation(fields: [providerId], references: [id], onDelete: SetNull)
    providerId String?

    @@index([providerId])
}

model Review {
    id String @id @default(cuid())

    details String? @db.Text

    rating Int

    serviceRequest   ServiceRequest? @relation("serviceRequestReview", fields: [serviceRequestId], references: [id], onDelete: SetNull)
    serviceRequestId String?

    reviewedProfile   Profile? @relation("receivedByReview", fields: [reviewedProfileId], references: [id], onDelete: SetNull)
    reviewedProfileId String?

    author   Profile @relation("createdByReview", fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    // Champs pour l'audit et la modération des avis
    isVerified Boolean @default(false) // Indique si l'avis a été vérifié
    isPublic   Boolean @default(true) // Indique si l'avis est public

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([reviewedProfileId, authorId, serviceRequestId])
    @@index([authorId])
    @@index([reviewedProfileId])
    @@index([serviceRequestId])
}

model Notification {
    id       String   @id @default(cuid())
    type     String
    isRead   Boolean? @default(false)
    imageUrl String? // URL de l'image associée à la notification
    title    String
    message  String   @db.Text
    url      String? // URL optionnelle pour rediriger l'utilisateur

    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String

    createdAt DateTime @default(now())

    @@index([profileId, createdAt])
}

model Profile {
    id      String  @id @default(cuid())
    slug    String  @unique
    name    String  @unique
    avatar  String?
    bio     String? @db.Text
    aboutMe String? @db.Text

    createdReviews  Review[] @relation("createdByReview")
    receivedReviews Review[] @relation("receivedByReview")

    websiteUrl  String?
    facebookUrl String?
    linkedinUrl String?
    XUrl        String?
    type        ProfileType
    phone       String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
    locationId String?

    comments       Comment[]
    directMessages DirectMessage[]
    notifications  Notification[]

    conversationsInitiated Conversation[] @relation("ProfileOne")
    conversationsReceived  Conversation[] @relation("ProfileTwo")

    providerInfo Provider?

    customerInfo Customer?

    deletedAt DateTime?

    bannedAt DateTime?

    isMuted Boolean? @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([locationId])
}

model Provider {
    id         String  @id @default(cuid())
    profession String?

    isFaceToFace Boolean? @default(true)
    isRemote     Boolean? @default(true)

    showCaseProjects ShowCaseProject[] // Should be Max 03 projects

    skills Skill[]

    proposals Proposal[]

    serviceRequestReservations ServiceRequestReservation[] @relation("ServiceRequestReservationRelation")

    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String  @unique
}

model Customer {
    id                String                      @id @default(cuid())
    serviceRequests   ServiceRequest[]
    providersReserved ServiceRequestReservation[] @relation("ServiceRequestReservationRelation")

    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String  @unique
}

model CategoryService {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String? @unique
    description String?

    services Service[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Service {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String? @unique
    description String?

    serviceRequests ServiceRequest[]

    categoryService   CategoryService? @relation(fields: [categoryServiceId], references: [id], onDelete: SetNull)
    categoryServiceId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([categoryServiceId])
}

model File {
    id   String  @id @default(cuid())
    name String
    url  String
    key  String? @unique

    serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: SetNull)
    serviceRequestId String?

    showCaseProject   ShowCaseProject? @relation(fields: [showCaseProjectId], references: [id], onDelete: SetNull)
    showCaseProjectId String?          @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([serviceRequestId])
}

model ServiceRequest {
    id                     String   @id @default(cuid())
    title                  String   @db.Text
    slug                   String   @unique
    description            String?  @db.Text
    phoneToContact         String
    photos                 File[] // Should be Max 03 photos
    numberOfProviderNeeded Int      @default(1)
    willWantProposal       Boolean? @default(false)
    nbOfHours              Float?
    date                   DateTime @db.Date
    startHour              Float
    estimatedPrice         Float?

    location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String

    status      ServiceRequestStatus? @default(value: OPEN)
    closeReason String?

    comments Comment[]

    proposals Proposal[]

    reviews Review[] @relation("serviceRequestReview")

    providersReserved ServiceRequestReservation[] @relation("ServiceRequestReservationRelation")

    author   Customer @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    serviceId String

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([serviceId])
    @@index([authorId])
    @@index([locationId])
}

//For one to one conversations
model DirectMessage {
    id        String    @id @default(cuid())
    content   String?   @db.Text
    fileUrl   String?   @db.Text
    deletedAt DateTime?

    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String

    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([conversationId])
}

model Conversation {
    id String @id @default(cuid())

    profileOne   Profile @relation("ProfileOne", fields: [profileOneId], references: [id], onDelete: Cascade)
    profileOneId String

    profileTwo   Profile @relation("ProfileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)
    profileTwoId String

    directMessages DirectMessage[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([profileOneId, profileTwoId])
    @@index([profileOneId])
    @@index([profileTwoId])
}

model Comment {
    id   String @id @default(cuid())
    text String @db.Text

    author   Profile @relation(fields: [authorId], references: [id])
    authorId String

    serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: SetNull)
    serviceRequestId String?

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([serviceRequestId])
    @@index([authorId])
}

model Proposal {
    id      String @id @default(cuid())
    content String @db.Text
    price   Float?

    author   Provider @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: SetNull)
    serviceRequestId String?

    serviceRequestReservation ServiceRequestReservation?

    isArchived Boolean? @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([serviceRequestId])
    @@index([authorId])
}

model ServiceRequestReservation {
    provider          Provider @relation("ServiceRequestReservationRelation", fields: [providerProfileId], references: [profileId], onDelete: Cascade)
    providerProfileId String

    customer          Customer @relation("ServiceRequestReservationRelation", fields: [customerProfileId], references: [profileId], onDelete: Cascade)
    customerProfileId String

    proposal   Proposal? @relation(fields: [proposalId], references: [id], onDelete: Cascade)
    proposalId String?   @unique

    serviceRequest   ServiceRequest? @relation("ServiceRequestReservationRelation", fields: [serviceRequestId], references: [id], onDelete: Cascade)
    serviceRequestId String

    removedAt  DateTime?
    removeNote String?   @db.Text
    isActive   Boolean   @default(true)
    createdAt  DateTime  @default(now())

    @@id([providerProfileId, serviceRequestId, customerProfileId])
    @@index([customerProfileId])
    @@index([providerProfileId])
    @@index([serviceRequestId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.Text
    access_token      String? @map("accessToken") @db.Text
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken") @db.Text
    session_state     String? @map("sessionSate")

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model Location {
    id             String           @id @default(cuid())
    placeId        String           @unique
    address        String
    country        String?
    city           String?
    lat            Float
    long           Float
    Profile        Profile[]
    ServiceRequest ServiceRequest[]
}

model Feedback {
    id       String       @id @default(cuid())
    content  String       @db.Text
    imageUrl String?
    type     FeedbackType

    createdAt DateTime @default(now())
}

model User {
    id                 String    @id @default(cuid())
    firstName          String
    lastName           String
    fullName           String
    tos                Boolean?  @default(false)
    onboardingComplete Boolean?  @default(false)
    // onboardingSteps Json      @default("[\"MODERATION\", \"PAYMENT_INFO\"]") // TODO: Store enums as a JSON field since i'm using MySql => OnboardingStep[]
    picture            String?
    version            Float
    birthdate          String?
    email              String    @unique
    emailVerified      DateTime?
    sex                Sex?      @default(value: MALE)
    role               Role      @default(value: MEMBER)

    accounts Account[]
    sessions Session[]
    profiles Profile[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Sex {
    MALE
    FEMALE
}

enum Role {
    ADMIN
    MEMBER
}

enum ServiceRequestStatus {
    OPEN
    CLOSED
}

enum ProfileType {
    CUSTOMER
    PROVIDER
}

enum OnboardingStep {
    MODERATION
    PAYMENT_INFO
}

enum FeedbackType {
    Bug
    Suggestion
    Other
}
