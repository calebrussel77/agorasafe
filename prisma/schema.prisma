// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Skill {
    id         String     @id @default(cuid())
    name       String     @unique
    slug       String
    created_at DateTime   @default(now())
    updated_at DateTime   @updatedAt
    providers  Provider[]
}

model Profile {
    id     String      @id @default(cuid())
    slug   String      @unique
    name   String      @unique
    avatar String?
    bio    String?
    type   ProfileType

    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String

    provider Provider?

    customer Customer?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Provider {
    id                   String   @id @default(cuid())
    website_url          String?
    profession           String?
    is_face_to_face      Boolean? @default(true)
    is_remote            Boolean? @default(true)
    showcase_photo_one   String?
    showcase_photo_two   String?
    showcase_photo_three String?

    skills                     Skill[]
    service_requests_responses ProviderServiceRequestResponse[]

    profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
    profile_id String  @unique

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Customer {
    id               String           @id @default(cuid())
    service_requests ServiceRequest[]

    profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
    profile_id String  @unique

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model CategoryService {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String? @unique
    description String?

    services Service[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Service {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String? @unique
    description String?

    service_requests ServiceRequest[]

    categories CategoryService[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model ServiceRequest {
    id                        String  @id @default(cuid())
    title                     String
    slug                      String  @unique
    description               String
    phone_to_contact          String
    photo_one                 String?
    photo_two                 String?
    photo_three               String?
    number_of_provider_needed Int
    duration                  String?
    start_date                String
    end_date                  String?
    estimated_price           String
    location                  String

    status ServiceRequestStatus? @default(value: OPEN)

    provider_responses ProviderServiceRequestResponse[]

    author    Customer @relation(fields: [author_id], references: [id], onDelete: Cascade)
    author_id String

    service    Service @relation(fields: [service_id], references: [id], onDelete: Cascade)
    service_id String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model ProviderServiceRequestResponse {
    id             String  @id @default(cuid())
    text           String
    proposed_price String?

    author    Provider @relation(fields: [author_id], references: [id])
    author_id String

    ServiceRequest     ServiceRequest @relation(fields: [service_request_id], references: [id], onDelete: Cascade)
    service_request_id String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @map("user_id")

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @map("user_id")

    @@map("sessions")
}

model Location {
    id       String  @id @default(cuid())
    name     String
    lat      String
    long     String
    wikidata String?

    users User[]
}

model User {
    id            String    @id @default(cuid())
    first_name    String
    last_name     String
    full_name     String
    picture       String?
    birthdate     String?
    email         String    @unique
    emailVerified DateTime? @map("email_verified")
    phone         String?
    sex           Sex?      @default(value: MALE)

    accounts Account[]
    sessions Session[]
    profiles Profile[]

    location    Location? @relation(fields: [location_id], references: [id], onDelete: Cascade)
    location_id String?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Sex {
    MALE
    FEMALE
}

enum ServiceRequestStatus {
    OPEN
    CLOSED
}

enum ProfileType {
    CUSTOMER
    PROVIDER
}
