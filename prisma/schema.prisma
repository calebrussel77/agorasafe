// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Skill {
    id        String     @id @default(cuid())
    name      String     @unique
    slug      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    providers Provider[]
}

model Profile {
    id     String      @id @default(cuid())
    slug   String      @unique
    name   String      @unique
    avatar String?
    bio    String?
    type   ProfileType

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    provider Provider?

    customer Customer?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Provider {
    id                 String   @id @default(cuid())
    websiteUrl         String?
    profession         String?
    isFaceToFace       Boolean? @default(true)
    isRemote           Boolean? @default(true)
    showcasePhotoOne   String?
    showcasePhotoTwo   String?
    showcasePhotoThree String?

    skills                  Skill[]
    serviceRequestResponses ProviderServiceRequestResponse[]

    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Customer {
    id              String           @id @default(cuid())
    serviceRequests ServiceRequest[]

    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CategoryService {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String? @unique
    description String?

    services Service[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Service {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String? @unique
    description String?

    serviceRequests ServiceRequest[]

    categories CategoryService[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ServiceRequest {
    id                     String  @id @default(cuid())
    title                  String
    slug                   String  @unique
    description            String
    phoneToContact         String
    photoOne               String?
    photoTwo               String?
    photoThree             String?
    numberOfProviderNeeded Int
    duration               String?
    start_date             String
    end_date               String?
    estimated_price        String
    location               String

    status ServiceRequestStatus? @default(value: OPEN)

    provider_responses ProviderServiceRequestResponse[]

    author   Customer @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    serviceId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProviderServiceRequestResponse {
    id            String  @id @default(cuid())
    text          String
    proposedPrice String?

    author   Provider @relation(fields: [authorId], references: [id])
    authorId String

    ServiceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
    serviceRequestId String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.Text
    access_token      String? @map("accessToken") @db.Text
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken") @db.Text
    session_state     String? @map("sessionSate")

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model Location {
    id       String  @id @default(cuid())
    name     String
    lat      String
    long     String
    wikidata String?

    users User[]
}

model User {
    id            String    @id @default(cuid())
    firstName     String
    lastName      String
    fullName      String
    picture       String?
    birthdate     String?
    email         String    @unique
    emailVerified DateTime?
    phone         String?
    sex           Sex?      @default(value: MALE)

    accounts Account[]
    sessions Session[]
    profiles Profile[]

    location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Sex {
    MALE
    FEMALE
}

enum ServiceRequestStatus {
    OPEN
    CLOSED
}

enum ProfileType {
    CUSTOMER
    PROVIDER
}
